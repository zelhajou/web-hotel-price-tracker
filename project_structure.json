{
  "type": "directory",
  "name": "Hotel-Price-Tracker",
  "contents": {
    "scraper": {
      "type": "directory",
      "name": "scraper",
      "contents": {
        "requirements.txt": {
          "type": "file",
          "name": "requirements.txt",
          "extension": ".txt",
          "content": "jupyter==1.0.0\njupyterlab==4.0.9\nnotebook>=7.0.6\nselenium>=4.0.0\nbeautifulsoup4>=4.9.3\npandas>=1.4.3\nrequests>=2.28.1\npython-dotenv>=0.20.0\naiohttp>=3.8.1\nfake-useragent>=0.1.11\ntenacity>=8.0.1\nwebdriver-manager>=3.8.3\nlxml>=4.9.1\nhtml5lib>=1.1\njupyter_server>=2.0.0\nipykernel>=6.0.0\njupyterlab_widgets>=3.0.0"
        },
        "Dockerfile": {
          "type": "file",
          "name": "Dockerfile",
          "extension": "",
          "content": "FROM python:3.11-slim\n\nWORKDIR /app\n\n# Install system dependencies\nRUN apt-get update && apt-get install -y \\\n    chromium \\\n    chromium-driver \\\n    wget \\\n    curl \\\n    unzip \\\n    xvfb \\\n    bash \\\n    nodejs \\\n    npm \\\n    && rm -rf /var/lib/apt/lists/*\n\n# Set environment variables\nENV PYTHONUNBUFFERED=1\nENV DISPLAY=:99\nENV CHROME_BIN=/usr/bin/chromium\nENV CHROMEDRIVER_PATH=/usr/bin/chromedriver\nENV JUPYTER_RUNTIME_DIR=/tmp/jupyter_runtime\nENV JUPYTER_DATA_DIR=/app/.jupyter\nENV PYTHONPATH=/app\nENV VIRTUAL_ENV=/app/venv\nENV PATH=\"$VIRTUAL_ENV/bin:$PATH\"\n\n# Create virtual environment\nRUN python -m venv /app/venv\n\n# Create directories\nRUN mkdir -p /app/data /app/src /app/notebooks /app/.jupyter\n\n# Install Python packages in virtual environment\nCOPY requirements.txt .\nRUN pip install --no-cache-dir -r requirements.txt\n\n# Set up virtual display\nRUN Xvfb :99 -screen 0 1920x1080x24 > /dev/null 2>&1 &\n\n# Make sure directories have correct permissions\nRUN chmod -R 777 /app/data /app/.jupyter /tmp\n\nEXPOSE 8888"
        },
        "html_pages": {
          "type": "directory",
          "name": "html_pages",
          "contents": {}
        },
        "notebooks": {
          "type": "directory",
          "name": "notebooks",
          "contents": {
            "scraper_test.ipynb": {
              "type": "file",
              "name": "scraper_test.ipynb",
              "extension": ".ipynb",
              "content": "{\n \"cells\": [\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": 1,\n   \"metadata\": {\n    \"scrolled\": true\n   },\n   \"outputs\": [\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"Notebook directory: /app\\n\",\n      \"Project root: /\\n\",\n      \"Current working directory: /app/notebooks\\n\",\n      \"\u2705 Successfully imported KayakHotelScraper\\n\",\n      \"\\n\",\n      \"== \ud83d\ude80 Start Scraper Test ==\\n\",\n      \"\\n\",\n      \"\ud83c\udf0d Testing configuration:\\n\",\n      \"  \u2022 City: Errachidia\\n\",\n      \"  \u2022 Check-in: 2025-01-10\\n\",\n      \"  \u2022 Check-out: 2025-01-14\\n\",\n      \"  \u2022 Hotel limit: 5\\n\",\n      \"\\n\",\n      \"==== \ud83d\udccc Initialize Scraper ====\\n\"\n     ]\n    },\n    {\n     \"name\": \"stderr\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"2024-12-31 14:17:00,268 [INFO] WebDriver initialized successfully\\n\",\n      \"2024-12-31 14:17:00,289 [INFO] Loading URL (attempt 1): https://www.kayak.com/hotels/Errachidia-c52508/2025-01-10/2025-01-14/2adults?sort=rank_a\\n\"\n     ]\n    },\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"\\n\",\n      \"==== \ud83d\ude80 Start Scraping ====\\n\"\n     ]\n    },\n    {\n     \"name\": \"stderr\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"2024-12-31 14:17:36,726 [INFO] Found 28 hotels\\n\",\n      \"2024-12-31 14:17:37,521 [INFO] Loading detail page: https://www.kayak.com/hotels/Ighiz-Inn-Resort,Errachidia-p170319-h9063437-details/2025-01-10/2025-01-14/2adults?psid=eSEkSEBJxr&pm=daybase#overview\\n\",\n      \"2024-12-31 14:17:37,523 [INFO] Loading URL (attempt 1): https://www.kayak.com/hotels/Ighiz-Inn-Resort,Errachidia-p170319-h9063437-details/2025-01-10/2025-01-14/2adults?psid=eSEkSEBJxr&pm=daybase#overview\\n\",\n      \"2024-12-31 14:18:08,645 [INFO] Found 2 room elements\\n\",\n      \"2024-12-31 14:18:10,003 [INFO] Successfully extracted room: Double or Twin Room with Garden View\\n\",\n      \"2024-12-31 14:18:12,029 [INFO] Successfully extracted room: Two-Bedroom Bungalow\\n\",\n      \"2024-12-31 14:18:12,035 [INFO] Found 2 room types\\n\",\n      \"2024-12-31 14:20:04,468 [INFO] Loading URL (attempt 1): https://www.kayak.com/hotels/Errachidia-c52508/2025-01-10/2025-01-14/2adults?sort=rank_a\\n\",\n      \"2024-12-31 14:20:39,378 [INFO] Loading detail page: https://www.kayak.com/hotels/Kasbah-Hotel-Camping-Jurassique,Errachidia-p170319-h542701-details/2025-01-10/2025-01-14/2adults?psid=eSEkSEBJxr&pm=daybase#overview\\n\",\n      \"2024-12-31 14:20:39,400 [INFO] Loading URL (attempt 1): https://www.kayak.com/hotels/Kasbah-Hotel-Camping-Jurassique,Errachidia-p170319-h542701-details/2025-01-10/2025-01-14/2adults?psid=eSEkSEBJxr&pm=daybase#overview\\n\",\n      \"2024-12-31 14:21:12,077 [INFO] Found 4 room elements\\n\",\n      \"2024-12-31 14:21:13,291 [INFO] Successfully extracted room: Standard Double Room\\n\",\n      \"2024-12-31 14:21:14,415 [INFO] Successfully extracted room: Twin Room with Garden View\\n\",\n      \"2024-12-31 14:21:16,550 [INFO] Successfully extracted room: Standard Triple Room\\n\",\n      \"2024-12-31 14:21:28,721 [INFO] Successfully extracted room: Classic Quadruple Room\\n\",\n      \"2024-12-31 14:21:28,761 [INFO] Found 4 room types\\n\",\n      \"2024-12-31 14:23:21,196 [INFO] Loading URL (attempt 1): https://www.kayak.com/hotels/Errachidia-c52508/2025-01-10/2025-01-14/2adults?sort=rank_a\\n\",\n      \"2024-12-31 14:24:02,784 [INFO] Loading detail page: https://www.kayak.com/hotels/HN-Home-House-with-air-conditioning-garage-included-Free,Errachidia-p170319-h1071217711-details/2025-01-10/2025-01-14/2adults?psid=eSEkSEBJxr&pm=daybase#overview\\n\",\n      \"2024-12-31 14:24:02,870 [INFO] Loading URL (attempt 1): https://www.kayak.com/hotels/HN-Home-House-with-air-conditioning-garage-included-Free,Errachidia-p170319-h1071217711-details/2025-01-10/2025-01-14/2adults?psid=eSEkSEBJxr&pm=daybase#overview\\n\",\n      \"2024-12-31 14:24:32,645 [INFO] Found 1 room elements\\n\",\n      \"2024-12-31 14:24:34,664 [INFO] Successfully extracted room: Three-Bedroom Apartment\\n\",\n      \"2024-12-31 14:24:34,671 [INFO] Found 1 room types\\n\",\n      \"2024-12-31 14:26:27,318 [INFO] Loading URL (attempt 1): https://www.kayak.com/hotels/Errachidia-c52508/2025-01-10/2025-01-14/2adults?sort=rank_a\\n\",\n      \"2024-12-31 14:27:05,838 [INFO] Loading detail page: https://www.kayak.com/hotels/Maison-Vallee-Du-Ziz,Errachidia-p170319-h2021191-details/2025-01-10/2025-01-14/2adults?psid=eSEkSEBJxr&pm=daybase#overview\\n\",\n      \"2024-12-31 14:27:05,851 [INFO] Loading URL (attempt 1): https://www.kayak.com/hotels/Maison-Vallee-Du-Ziz,Errachidia-p170319-h2021191-details/2025-01-10/2025-01-14/2adults?psid=eSEkSEBJxr&pm=daybase#overview\\n\",\n      \"2024-12-31 14:27:36,370 [INFO] Found 4 room elements\\n\",\n      \"2024-12-31 14:27:37,723 [INFO] Successfully extracted room: Deluxe Double or Twin Room\\n\",\n      \"2024-12-31 14:27:38,974 [INFO] Successfully extracted room: Superior Double Room\\n\",\n      \"2024-12-31 14:27:41,134 [INFO] Successfully extracted room: Triple Room\\n\",\n      \"2024-12-31 14:27:43,926 [INFO] Successfully extracted room: Family Room\\n\",\n      \"2024-12-31 14:27:43,937 [INFO] Found 4 room types\\n\",\n      \"2024-12-31 14:29:36,391 [INFO] Loading URL (attempt 1): https://www.kayak.com/hotels/Errachidia-c52508/2025-01-10/2025-01-14/2adults?sort=rank_a\\n\",\n      \"2024-12-31 14:30:13,178 [INFO] Loading detail page: https://www.kayak.com/hotels/Residence-Sehrawilocation,Errachidia-p170319-h1071194442-details/2025-01-10/2025-01-14/2adults?psid=eSEkSEBJxr&pm=daybase#overview\\n\",\n      \"2024-12-31 14:30:13,333 [INFO] Loading URL (attempt 1): https://www.kayak.com/hotels/Residence-Sehrawilocation,Errachidia-p170319-h1071194442-details/2025-01-10/2025-01-14/2adults?psid=eSEkSEBJxr&pm=daybase#overview\\n\",\n      \"2024-12-31 14:30:43,145 [INFO] Found 1 room elements\\n\",\n      \"2024-12-31 14:30:54,317 [INFO] Successfully extracted room: All deals\\n\",\n      \"2024-12-31 14:30:54,322 [INFO] Found 1 room types\\n\",\n      \"2024-12-31 14:32:16,703 [INFO] Loading URL (attempt 1): https://www.kayak.com/hotels/Errachidia-c52508/2025-01-10/2025-01-14/2adults?sort=rank_a\\n\",\n      \"2024-12-31 14:32:54,667 [INFO] Data saved successfully to data/hotel_data.json\\n\"\n     ]\n    },\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"\\n\",\n      \"==== \u2705 Success ====\\n\",\n      \"Successfully scraped 5 hotels\\n\",\n      \"\\n\",\n      \"\ud83d\udcbe Results saved to: data/hotel_data.json\\n\",\n      \"\\n\",\n      \"==== \ud83d\udccc Detailed Results ====\\n\",\n      \"\\n\",\n      \"==================== Hotel 1: Ighiz Inn Resort ====================\\n\",\n      \"\\n\",\n      \"\ud83d\udccd Basic Information:\\n\",\n      \"  \u2022 Name: Ighiz Inn Resort\\n\",\n      \"  \u2022 Location: Nearby - Forkan Mosque, Garden Boutalamine\\n\",\n      \"  \u2022 Price: $40\\n\",\n      \"\\n\",\n      \"\u2b50 Ratings & Reviews:\\n\",\n      \"  \u2022 Rating: 8.0\\n\",\n      \"  \u2022 Review Count: 379\\n\",\n      \"\\n\",\n      \"\ud83d\udecf\ufe0f Room Options:\\n\",\n      \"\\n\",\n      \"  Room Type 1:\\n\",\n      \"    \u2022 Type: Double or Twin Room with Garden View\\n\",\n      \"    \u2022 Price: $40.00\\n\",\n      \"    \u2022 Beds: 1 double bed\\n\",\n      \"    \u2022 Cancellation: Free cancellation\\n\",\n      \"    \u2022 Board: Free breakfast\\n\",\n      \"\\n\",\n      \"  Room Type 2:\\n\",\n      \"    \u2022 Type: Two-Bedroom Bungalow\\n\",\n      \"    \u2022 Price: $60.00\\n\",\n      \"    \u2022 Beds: None\\n\",\n      \"    \u2022 Cancellation: Free cancellation\\n\",\n      \"    \u2022 Board: Free breakfast\\n\",\n      \"\\n\",\n      \"\ud83d\udd17 Hotel URL:\\n\",\n      \"  https://www.kayak.com/hotels/Ighiz-Inn-Resort,Errachidia-p170319-h9063437-details/2025-01-10/2025-01-14/2adults?psid=eSEkSEBJxr&pm=daybase#overview\\n\",\n      \"\\n\",\n      \"--------------------------------------------------\\n\",\n      \"\\n\",\n      \"==================== Hotel 2: Kasbah Hotel Camping Jurassique ====================\\n\",\n      \"\\n\",\n      \"\ud83d\udccd Basic Information:\\n\",\n      \"  \u2022 Name: Kasbah Hotel Camping Jurassique\\n\",\n      \"  \u2022 Location: Nearby - Errachidia Chamber of Commerce, Garden Boutalamine\\n\",\n      \"  \u2022 Price: $22\\n\",\n      \"\\n\",\n      \"\u2b50 Ratings & Reviews:\\n\",\n      \"  \u2022 Rating: 8.5\\n\",\n      \"  \u2022 Review Count: 924\\n\",\n      \"\\n\",\n      \"\ud83d\udecf\ufe0f Room Options:\\n\",\n      \"\\n\",\n      \"  Room Type 1:\\n\",\n      \"    \u2022 Type: Standard Double Room\\n\",\n      \"    \u2022 Price: $22.00\\n\",\n      \"    \u2022 Beds: 1 double bed\\n\",\n      \"    \u2022 Cancellation: Free cancellation\\n\",\n      \"    \u2022 Board: None\\n\",\n      \"\\n\",\n      \"  Room Type 2:\\n\",\n      \"    \u2022 Type: Twin Room with Garden View\\n\",\n      \"    \u2022 Price: $24.00\\n\",\n      \"    \u2022 Beds: 2 twin beds\\n\",\n      \"    \u2022 Cancellation: Free cancellation\\n\",\n      \"    \u2022 Board: None\\n\",\n      \"\\n\",\n      \"  Room Type 3:\\n\",\n      \"    \u2022 Type: Standard Triple Room\\n\",\n      \"    \u2022 Price: $27.00\\n\",\n      \"    \u2022 Beds: None\\n\",\n      \"    \u2022 Cancellation: Free cancellation\\n\",\n      \"    \u2022 Board: None\\n\",\n      \"\\n\",\n      \"  Room Type 4:\\n\",\n      \"    \u2022 Type: Classic Quadruple Room\\n\",\n      \"    \u2022 Price: $33.00\\n\",\n      \"    \u2022 Beds: None\\n\",\n      \"    \u2022 Cancellation: None\\n\",\n      \"    \u2022 Board: None\\n\",\n      \"\\n\",\n      \"\ud83d\udd17 Hotel URL:\\n\",\n      \"  https://www.kayak.com/hotels/Kasbah-Hotel-Camping-Jurassique,Errachidia-p170319-h542701-details/2025-01-10/2025-01-14/2adults?psid=eSEkSEBJxr&pm=daybase#overview\\n\",\n      \"\\n\",\n      \"--------------------------------------------------\\n\",\n      \"\\n\",\n      \"==================== Hotel 3: HN Home House with air conditioning garage included Free ====================\\n\",\n      \"\\n\",\n      \"\ud83d\udccd Basic Information:\\n\",\n      \"  \u2022 Name: HN Home House with air conditioning garage included Free\\n\",\n      \"  \u2022 Location: Nearby - Forkan Mosque, Errachidia Chamber of Commerce\\n\",\n      \"  \u2022 Price: $30\\n\",\n      \"\\n\",\n      \"\u2b50 Ratings & Reviews:\\n\",\n      \"  \u2022 Rating: 8.5\\n\",\n      \"  \u2022 Review Count: 3\\n\",\n      \"\\n\",\n      \"\ud83d\udecf\ufe0f Room Options:\\n\",\n      \"\\n\",\n      \"  Room Type 1:\\n\",\n      \"    \u2022 Type: Three-Bedroom Apartment\\n\",\n      \"    \u2022 Price: $30.00\\n\",\n      \"    \u2022 Beds: None\\n\",\n      \"    \u2022 Cancellation: Free cancellation\\n\",\n      \"    \u2022 Board: None\\n\",\n      \"\\n\",\n      \"\ud83d\udd17 Hotel URL:\\n\",\n      \"  https://www.kayak.com/hotels/HN-Home-House-with-air-conditioning-garage-included-Free,Errachidia-p170319-h1071217711-details/2025-01-10/2025-01-14/2adults?psid=eSEkSEBJxr&pm=daybase#overview\\n\",\n      \"\\n\",\n      \"--------------------------------------------------\\n\",\n      \"\\n\",\n      \"==================== Hotel 4: Maison Vall\u00e9e Du Ziz ====================\\n\",\n      \"\\n\",\n      \"\ud83d\udccd Basic Information:\\n\",\n      \"  \u2022 Name: Maison Vall\u00e9e Du Ziz\\n\",\n      \"  \u2022 Location: Nearby - Errachidia Chamber of Commerce, Forkan Mosque\\n\",\n      \"  \u2022 Price: $62\\n\",\n      \"\\n\",\n      \"\u2b50 Ratings & Reviews:\\n\",\n      \"  \u2022 Rating: 9.2\\n\",\n      \"  \u2022 Review Count: 171\\n\",\n      \"\\n\",\n      \"\ud83d\udecf\ufe0f Room Options:\\n\",\n      \"\\n\",\n      \"  Room Type 1:\\n\",\n      \"    \u2022 Type: Deluxe Double or Twin Room\\n\",\n      \"    \u2022 Price: $62.00\\n\",\n      \"    \u2022 Beds: 1 double bed\\n\",\n      \"    \u2022 Cancellation: Free cancellation\\n\",\n      \"    \u2022 Board: Free breakfast\\n\",\n      \"\\n\",\n      \"  Room Type 2:\\n\",\n      \"    \u2022 Type: Superior Double Room\\n\",\n      \"    \u2022 Price: $65.00\\n\",\n      \"    \u2022 Beds: 1 double bed\\n\",\n      \"    \u2022 Cancellation: Free cancellation\\n\",\n      \"    \u2022 Board: Free breakfast\\n\",\n      \"\\n\",\n      \"  Room Type 3:\\n\",\n      \"    \u2022 Type: Triple Room\\n\",\n      \"    \u2022 Price: $86.00\\n\",\n      \"    \u2022 Beds: None\\n\",\n      \"    \u2022 Cancellation: Free cancellation\\n\",\n      \"    \u2022 Board: Free breakfast\\n\",\n      \"\\n\",\n      \"  Room Type 4:\\n\",\n      \"    \u2022 Type: Family Room\\n\",\n      \"    \u2022 Price: $114.00\\n\",\n      \"    \u2022 Beds: None\\n\",\n      \"    \u2022 Cancellation: Free cancellation\\n\",\n      \"    \u2022 Board: Free breakfast\\n\",\n      \"\\n\",\n      \"\ud83d\udd17 Hotel URL:\\n\",\n      \"  https://www.kayak.com/hotels/Maison-Vallee-Du-Ziz,Errachidia-p170319-h2021191-details/2025-01-10/2025-01-14/2adults?psid=eSEkSEBJxr&pm=daybase#overview\\n\",\n      \"\\n\",\n      \"--------------------------------------------------\\n\",\n      \"\\n\",\n      \"==================== Hotel 5: R\u00e9sidence Sehrawilocation ====================\\n\",\n      \"\\n\",\n      \"\ud83d\udccd Basic Information:\\n\",\n      \"  \u2022 Name: R\u00e9sidence Sehrawilocation\\n\",\n      \"  \u2022 Location: Nearby - Garden Boutalamine, Forkan Mosque\\n\",\n      \"  \u2022 Price: $22\\n\",\n      \"\\n\",\n      \"\u2b50 Ratings & Reviews:\\n\",\n      \"  \u2022 Rating: 9.0\\n\",\n      \"  \u2022 Review Count: 2\\n\",\n      \"\\n\",\n      \"\ud83d\udecf\ufe0f Room Options:\\n\",\n      \"\\n\",\n      \"  Room Type 1:\\n\",\n      \"    \u2022 Type: All deals\\n\",\n      \"    \u2022 Price: $22.00\\n\",\n      \"    \u2022 Beds: None\\n\",\n      \"    \u2022 Cancellation: Free cancellation\\n\",\n      \"    \u2022 Board: None\\n\",\n      \"\\n\",\n      \"\ud83d\udd17 Hotel URL:\\n\",\n      \"  https://www.kayak.com/hotels/Residence-Sehrawilocation,Errachidia-p170319-h1071194442-details/2025-01-10/2025-01-14/2adults?psid=eSEkSEBJxr&pm=daybase#overview\\n\",\n      \"\\n\",\n      \"--------------------------------------------------\\n\",\n      \"\\n\",\n      \"\u2705 Verified saved data: 5 hotels in JSON file\\n\"\n     ]\n    },\n    {\n     \"name\": \"stderr\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"2024-12-31 14:32:56,433 [INFO] WebDriver closed successfully\\n\"\n     ]\n    },\n    {\n     \"name\": \"stdout\",\n     \"output_type\": \"stream\",\n     \"text\": [\n      \"\\n\",\n      \"\ud83d\udd12 Scraper closed successfully\\n\",\n      \"\\n\",\n      \"==== \ud83c\udfc1 Complete ====\\n\"\n     ]\n    }\n   ],\n   \"source\": [\n    \"import sys\\n\",\n    \"import os\\n\",\n    \"import json\\n\",\n    \"import random\\n\",\n    \"from datetime import datetime, timedelta\\n\",\n    \"import traceback\\n\",\n    \"from IPython.display import display, HTML\\n\",\n    \"\\n\",\n    \"# Add the project root to Python path\\n\",\n    \"notebook_dir = os.path.dirname(os.path.abspath(''))\\n\",\n    \"project_root = os.path.dirname(notebook_dir)\\n\",\n    \"\\n\",\n    \"# Print paths for debugging\\n\",\n    \"print(\\\"Notebook directory:\\\", notebook_dir)\\n\",\n    \"print(\\\"Project root:\\\", project_root)\\n\",\n    \"print(\\\"Current working directory:\\\", os.getcwd())\\n\",\n    \"\\n\",\n    \"# Add project root to Python path\\n\",\n    \"if project_root not in sys.path:\\n\",\n    \"    sys.path.append(project_root)\\n\",\n    \"\\n\",\n    \"try:\\n\",\n    \"    # Try importing the scraper\\n\",\n    \"    from src.scrapers.kayak import KayakHotelScraper\\n\",\n    \"    print(\\\"\u2705 Successfully imported KayakHotelScraper\\\")\\n\",\n    \"except Exception as e:\\n\",\n    \"    print(\\\"\u274c Error importing KayakHotelScraper:\\\")\\n\",\n    \"    print(str(e))\\n\",\n    \"    traceback.print_exc()\\n\",\n    \"\\n\",\n    \"def print_header(text, level=1):\\n\",\n    \"    \\\"\\\"\\\"Print formatted header with emojis\\\"\\\"\\\"\\n\",\n    \"    emoji_map = {\\n\",\n    \"        'start': '\ud83d\ude80',\\n\",\n    \"        'init': '\u2699\ufe0f',\\n\",\n    \"        'progress': '\ud83d\udcca',\\n\",\n    \"        'success': '\u2705',\\n\",\n    \"        'error': '\u274c',\\n\",\n    \"        'info': '\u2139\ufe0f',\\n\",\n    \"        'warning': '\u26a0\ufe0f',\\n\",\n    \"        'save': '\ud83d\udcbe',\\n\",\n    \"        'complete': '\ud83c\udfc1'\\n\",\n    \"    }\\n\",\n    \"    \\n\",\n    \"    prefix = '=' * (level * 2)\\n\",\n    \"    emoji = emoji_map.get(text.lower().split()[0], '\ud83d\udccc')\\n\",\n    \"    print(f\\\"\\\\n{prefix} {emoji} {text} {prefix}\\\")\\n\",\n    \"\\n\",\n    \"def print_section(text):\\n\",\n    \"    \\\"\\\"\\\"Print section separator with text\\\"\\\"\\\"\\n\",\n    \"    print(f\\\"\\\\n{'='*20} {text} {'='*20}\\\")\\n\",\n    \"\\n\",\n    \"def print_hotel_details(hotel):\\n\",\n    \"    \\\"\\\"\\\"Print detailed hotel information\\\"\\\"\\\"\\n\",\n    \"    print(\\\"\\\\n\ud83d\udccd Basic Information:\\\")\\n\",\n    \"    print(f\\\"  \u2022 Name: {hotel.get('hotel_name', 'N/A')}\\\")\\n\",\n    \"    print(f\\\"  \u2022 Location: {hotel.get('location', 'N/A')}\\\")\\n\",\n    \"    print(f\\\"  \u2022 Price: {hotel.get('price', 'N/A')}\\\")\\n\",\n    \"\\n\",\n    \"    if isinstance(hotel.get('review_scores'), dict):\\n\",\n    \"        print(\\\"\\\\n\u2b50 Ratings & Reviews:\\\")\\n\",\n    \"        scores = hotel['review_scores']\\n\",\n    \"        print(f\\\"  \u2022 Rating: {scores.get('rating', 'N/A')}\\\")\\n\",\n    \"        print(f\\\"  \u2022 Review Count: {scores.get('count', 'N/A')}\\\")\\n\",\n    \"    \\n\",\n    \"    if hotel.get('rooms'):\\n\",\n    \"        print(\\\"\\\\n\ud83d\udecf\ufe0f Room Options:\\\")\\n\",\n    \"        for i, room in enumerate(hotel['rooms'], 1):\\n\",\n    \"            print(f\\\"\\\\n  Room Type {i}:\\\")\\n\",\n    \"            print(f\\\"    \u2022 Type: {room.get('room_type', 'N/A')}\\\")\\n\",\n    \"            price = room.get('price')\\n\",\n    \"            if isinstance(price, (int, float)):\\n\",\n    \"                print(f\\\"    \u2022 Price: ${price:.2f}\\\")\\n\",\n    \"            else:\\n\",\n    \"                print(f\\\"    \u2022 Price: {price or 'N/A'}\\\")\\n\",\n    \"            print(f\\\"    \u2022 Beds: {room.get('bed_configuration', 'N/A')}\\\")\\n\",\n    \"            print(f\\\"    \u2022 Cancellation: {room.get('cancellation_policy', 'N/A')}\\\")\\n\",\n    \"            print(f\\\"    \u2022 Board: {room.get('board_type', 'N/A')}\\\")\\n\",\n    \"            if room.get('special_conditions'):\\n\",\n    \"                print(\\\"    \u2022 Special Conditions:\\\")\\n\",\n    \"                for condition in room['special_conditions']:\\n\",\n    \"                    print(f\\\"      - {condition}\\\")\\n\",\n    \"\\n\",\n    \"    if hotel.get('amenities'):\\n\",\n    \"        print(\\\"\\\\n\ud83c\udfe8 Amenities:\\\")\\n\",\n    \"        for amenity in hotel['amenities'][:10]:  # Show first 10 amenities\\n\",\n    \"            print(f\\\"  \u2022 {amenity}\\\")\\n\",\n    \"        if len(hotel['amenities']) > 10:\\n\",\n    \"            print(f\\\"  ... and {len(hotel['amenities']) - 10} more\\\")\\n\",\n    \"\\n\",\n    \"    if hotel.get('detail_url'):\\n\",\n    \"        print(\\\"\\\\n\ud83d\udd17 Hotel URL:\\\")\\n\",\n    \"        print(f\\\"  {hotel['detail_url']}\\\")\\n\",\n    \"    \\n\",\n    \"    print(\\\"\\\\n\\\" + \\\"-\\\"*50)\\n\",\n    \"\\n\",\n    \"def test_scraper(limit=5):\\n\",\n    \"    \\\"\\\"\\\"Test the hotel scraper with detailed logging\\\"\\\"\\\"\\n\",\n    \"    print_header(\\\"Start Scraper Test\\\")\\n\",\n    \"    \\n\",\n    \"    # Create data directory if it doesn't exist\\n\",\n    \"    os.makedirs('data', exist_ok=True)\\n\",\n    \"\\n\",\n    \"    # Set search parameters\\n\",\n    \"    city = \\\"Errachidia\\\"\\n\",\n    \"    check_in = datetime(2025, 1, 10)\\n\",\n    \"    check_out = datetime(2025, 1, 14)\\n\",\n    \"\\n\",\n    \"    # Print test configuration\\n\",\n    \"    print(f\\\"\\\\n\ud83c\udf0d Testing configuration:\\\")\\n\",\n    \"    print(f\\\"  \u2022 City: {city}\\\")\\n\",\n    \"    print(f\\\"  \u2022 Check-in: {check_in.date()}\\\")\\n\",\n    \"    print(f\\\"  \u2022 Check-out: {check_out.date()}\\\")\\n\",\n    \"    print(f\\\"  \u2022 Hotel limit: {limit}\\\")\\n\",\n    \"    \\n\",\n    \"    try:\\n\",\n    \"        print_header(\\\"Initialize Scraper\\\", level=2)\\n\",\n    \"        scraper = KayakHotelScraper(\\n\",\n    \"            city=city,\\n\",\n    \"            check_in_date=check_in,\\n\",\n    \"            check_out_date=check_out\\n\",\n    \"        )\\n\",\n    \"\\n\",\n    \"        print_header(\\\"Start Scraping\\\", level=2)\\n\",\n    \"        result = scraper.scrape_hotels(limit=limit)\\n\",\n    \"        \\n\",\n    \"        if result and isinstance(result, dict):\\n\",\n    \"            hotels = result.get('hotels', [])\\n\",\n    \"            if hotels:\\n\",\n    \"                print_header(\\\"Success\\\", level=2)\\n\",\n    \"                print(f\\\"Successfully scraped {len(hotels)} hotels\\\")\\n\",\n    \"                \\n\",\n    \"                # Save results\\n\",\n    \"                scraper.save_results()\\n\",\n    \"                print(\\\"\\\\n\ud83d\udcbe Results saved to: data/hotel_data.json\\\")\\n\",\n    \"                \\n\",\n    \"                # Print detailed results\\n\",\n    \"                print_header(\\\"Detailed Results\\\", level=2)\\n\",\n    \"                for idx, hotel in enumerate(hotels, 1):\\n\",\n    \"                    print_section(f\\\"Hotel {idx}: {hotel.get('hotel_name', 'Unknown')}\\\")\\n\",\n    \"                    print_hotel_details(hotel)\\n\",\n    \"                    \\n\",\n    \"                # Data file verification\\n\",\n    \"                try:\\n\",\n    \"                    with open('data/hotel_data.json', 'r', encoding='utf-8') as f:\\n\",\n    \"                        saved_data = json.load(f)\\n\",\n    \"                    print(f\\\"\\\\n\u2705 Verified saved data: {len(saved_data['hotels'])} hotels in JSON file\\\")\\n\",\n    \"                except Exception as e:\\n\",\n    \"                    print(f\\\"\\\\n\u26a0\ufe0f Error verifying saved data: {str(e)}\\\")\\n\",\n    \"                    \\n\",\n    \"            else:\\n\",\n    \"                print_header(\\\"Error\\\", level=2)\\n\",\n    \"                print(\\\"No hotels were found in the results\\\")\\n\",\n    \"        else:\\n\",\n    \"            print_header(\\\"Error\\\", level=2)\\n\",\n    \"            print(\\\"No valid results returned from scraper\\\")\\n\",\n    \"        \\n\",\n    \"    except Exception as e:\\n\",\n    \"        print_header(\\\"Error\\\", level=2)\\n\",\n    \"        print(f\\\"An error occurred during scraping:\\\")\\n\",\n    \"        print(str(e))\\n\",\n    \"        print(\\\"\\\\nFull traceback:\\\")\\n\",\n    \"        traceback.print_exc()\\n\",\n    \"        \\n\",\n    \"    finally:\\n\",\n    \"        try:\\n\",\n    \"            scraper.close()\\n\",\n    \"            print(\\\"\\\\n\ud83d\udd12 Scraper closed successfully\\\")\\n\",\n    \"        except:\\n\",\n    \"            print(\\\"\\\\n\u26a0\ufe0f Error closing scraper\\\")\\n\",\n    \"        print_header(\\\"Complete\\\", level=2)\\n\",\n    \"\\n\",\n    \"if __name__ == \\\"__main__\\\":\\n\",\n    \"    # Run the test\\n\",\n    \"    test_scraper()\"\n   ]\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  },\n  {\n   \"cell_type\": \"code\",\n   \"execution_count\": null,\n   \"metadata\": {},\n   \"outputs\": [],\n   \"source\": []\n  }\n ],\n \"metadata\": {\n  \"kernelspec\": {\n   \"display_name\": \"Python 3 (ipykernel)\",\n   \"language\": \"python\",\n   \"name\": \"python3\"\n  },\n  \"language_info\": {\n   \"codemirror_mode\": {\n    \"name\": \"ipython\",\n    \"version\": 3\n   },\n   \"file_extension\": \".py\",\n   \"mimetype\": \"text/x-python\",\n   \"name\": \"python\",\n   \"nbconvert_exporter\": \"python\",\n   \"pygments_lexer\": \"ipython3\",\n   \"version\": \"3.11.11\"\n  }\n },\n \"nbformat\": 4,\n \"nbformat_minor\": 4\n}\n"
            },
            "data": {
              "type": "directory",
              "name": "data",
              "contents": {}
            }
          }
        },
        "src": {
          "type": "directory",
          "name": "src",
          "contents": {
            "core": {
              "type": "directory",
              "name": "core",
              "contents": {
                "__init__.py": {
                  "type": "file",
                  "name": "__init__.py",
                  "extension": ".py",
                  "content": ""
                },
                "logger.py": {
                  "type": "file",
                  "name": "logger.py",
                  "extension": ".py",
                  "content": "import logging\n\ndef setup_logger(name='HotelScraper'):\n    \"\"\"Configure and return a logger with both file and console handlers\"\"\"\n    logger = logging.getLogger(name)\n    logger.setLevel(logging.INFO)\n    \n    # Clear any existing handlers\n    logger.handlers = []\n    \n    # Create handlers\n    c_handler = logging.StreamHandler()\n    f_handler = logging.FileHandler('scraper.log')\n    \n    # Create formatters and add it to handlers\n    log_format = '%(asctime)s [%(levelname)s] %(message)s'\n    c_format = logging.Formatter(log_format)\n    f_format = logging.Formatter(log_format)\n    c_handler.setFormatter(c_format)\n    f_handler.setFormatter(f_format)\n    \n    # Add handlers to the logger\n    logger.addHandler(c_handler)\n    logger.addHandler(f_handler)\n    \n    return logger"
                },
                "driver.py": {
                  "type": "file",
                  "name": "driver.py",
                  "extension": ".py",
                  "content": "from selenium import webdriver\nfrom selenium.webdriver.chrome.options import Options\nfrom selenium.webdriver.chrome.service import Service\nfrom ..config.settings import CHROME_BINARY_PATH, CHROMEDRIVER_PATH\n\nclass WebDriverManager:\n    @staticmethod\n    def create_driver():\n        \"\"\"Create and configure Chrome WebDriver\"\"\"\n        chrome_options = Options()\n        \n        # Basic Chrome options\n        chrome_options.add_argument('--headless')\n        chrome_options.add_argument('--no-sandbox')\n        chrome_options.add_argument('--disable-dev-shm-usage')\n        chrome_options.add_argument('--disable-gpu')\n        chrome_options.add_argument('--window-size=1920,1080')\n        chrome_options.binary_location = CHROME_BINARY_PATH\n        \n        # Anti-bot detection options\n        chrome_options.add_argument('--disable-blink-features=AutomationControlled')\n        chrome_options.add_experimental_option('excludeSwitches', ['enable-automation'])\n        chrome_options.add_experimental_option('useAutomationExtension', False)\n        \n        # Set realistic user agent\n        user_agent = ('Mozilla/5.0 (Windows NT 10.0; Win64; x64) '\n                     'AppleWebKit/537.36 (KHTML, like Gecko) '\n                     'Chrome/120.0.0.0 Safari/537.36')\n        chrome_options.add_argument(f'user-agent={user_agent}')\n\n        service = Service(executable_path=CHROMEDRIVER_PATH)\n        driver = webdriver.Chrome(service=service, options=chrome_options)\n        \n        # Additional anti-bot configurations\n        driver.execute_cdp_cmd('Network.setUserAgentOverride', {\n            \"userAgent\": user_agent,\n            \"platform\": \"Windows\"\n        })\n        \n        driver.execute_script(\n            \"Object.defineProperty(navigator, 'webdriver', {get: () => undefined})\"\n        )\n        \n        driver.implicitly_wait(10)\n        return driver"
                }
              }
            },
            "config": {
              "type": "directory",
              "name": "config",
              "contents": {
                "__init__.py": {
                  "type": "file",
                  "name": "__init__.py",
                  "extension": ".py",
                  "content": ""
                },
                "settings.py": {
                  "type": "file",
                  "name": "settings.py",
                  "extension": ".py",
                  "content": "import os\n\n# Browser settings\nCHROME_BINARY_PATH = '/usr/bin/chromium'\nCHROMEDRIVER_PATH = '/usr/bin/chromedriver'\n\n# Data settings\nDATA_DIR = '/app/data'\nDEFAULT_OUTPUT_FILE = 'hotel_data.json'\n\n# Scraping settings\nDEFAULT_TIMEOUT = 10\nMAX_RETRIES = 3\nRETRY_DELAY = 2\n\n# Selectors for different elements\nSELECTORS = {\n    'hotel_card': 'div[class*=\"yuAt yuAt-pres-rounded\"]',\n    'hotel_name': 'a.FLpo-big-name',\n    'hotel_location': '.upS4-big-name',\n    'hotel_price': '.zV27-price-section .c1XBO, .Ptt7-price',\n    'hotel_rating': '.wdjx',\n    'hotel_reviews': '.xdhG-rating-description-and-count',\n    'hotel_description': '.b40a-desc-text, .b40a-desc-wrap--full',\n    'hotel_address': '.c3xth-address',\n    'room_card': '.c5l3f',\n}\n\n# Create data directory if it doesn't exist\nos.makedirs(DATA_DIR, exist_ok=True)"
                }
              }
            },
            "__init__.py": {
              "type": "file",
              "name": "__init__.py",
              "extension": ".py",
              "content": ""
            },
            "utils": {
              "type": "directory",
              "name": "utils",
              "contents": {
                "__init__.py": {
                  "type": "file",
                  "name": "__init__.py",
                  "extension": ".py",
                  "content": "# src/utils/__init__.py\nfrom .retry import (\n    find_element_with_retry,\n    wait_for_element,\n    wait_for_elements,\n    wait_for_page_load,\n    scroll_into_view\n)\nfrom .selectors import *\n\n__all__ = [\n    'find_element_with_retry',\n    'wait_for_element',\n    'wait_for_elements',\n    'wait_for_page_load',\n    'scroll_into_view'\n]"
                },
                "selectors.py": {
                  "type": "file",
                  "name": "selectors.py",
                  "extension": ".py",
                  "content": "\"\"\"CSS Selectors for Kayak hotel search and detail pages\"\"\"\n\n# Main containers and hotel cards\nHOTEL_CARD = 'div.S0Ps-resultInner'\nHOTEL_CONTAINER = 'div.S0Ps-middleSection'\nHOTEL_PHOTO = 'img.e9fk-photo'\nHOTEL_DESCRIPTION = 'div.b40a-desc-text'\n\n# Basic hotel information from search page\nHOTEL_NAME = 'a.FLpo-big-name'\nHOTEL_LOCATION = 'div.upS4-big-name'\nHOTEL_RATING = 'div.wdjx-positive'\nHOTEL_REVIEWS = 'div.xdhG-rating-description-and-count'\nHOTEL_STARS = 'span.Ius0'\n\n# Price information\nPRICE_SECTION = 'div.zV27-price-section'\nPRICE_AMOUNT = 'div.c1XBO'\nPROVIDER_LOGO = 'img.c7Fuo-provider-logo'\nPRICE_DEALS = 'div.qSC7'\n\n# Room information from detail page\nROOM_SECTION = 'div.LK1E-groupedRoomType'\nROOM_CARD = 'div.c5l3f'\nROOM_TYPE = 'div.c_Hjx-group-header-title'\nROOM_PRICE = 'span.C9NJ-amount'\nROOM_PROVIDER = 'img.c2pAq-logo'\nROOM_INFO = 'div.c_Hjx-header-details'\nROOM_SIZE = 'span.c_Hjx-amenity:contains(\"sq ft\")'\nROOM_VIEW = 'span.c_Hjx-amenity:contains(\"view\")'\n\n# Bed configuration\nBED_CONFIG = 'div.c_Hjx-detail-amenity'\nBED_TYPE = 'span.c_Hjx-amenity'\nBED_COUNT = 'div.c_Hjx-amenity'\n\n# Amenities selectors\nAMENITIES_SECTION = 'section.Vdvb'\nFEATURED_AMENITIES = '.t8Xi-amenity-name'\nAMENITY_CATEGORY = '.BxLB-category-name'\nAMENITY_ITEM = '.BxLB-amenity'\nAMENITY_NAME = '.BxLB-amenity-name'\n\n# Categories container\nCATEGORIES_CONTAINER = 'div.DbSA-categories-container'\n\n# Featured amenities at top\nFEATURED_AMENITIES = 'ul.kml-row'\n\n# Individual amenity sections\nAMENITY_SECTIONS = {\n    'basics': '.BxLB-category-name:contains(\"Basics\")',\n    'general': '.BxLB-category-name:contains(\"General\")',\n    'kitchen': '.BxLB-category-name:contains(\"Kitchen\")',\n    'bathroom': '.BxLB-category-name:contains(\"Bathroom\")',\n    'bedroom': '.BxLB-category-name:contains(\"Bedroom\")',\n    'outdoor': '.BxLB-category-name:contains(\"Outdoor\")',\n    'services': '.BxLB-category-name:contains(\"Services\")',\n    'family': '.BxLB-category-name:contains(\"Family friendly\")',\n    'accessibility': '.BxLB-category-name:contains(\"Accessibility\")',\n    'dining': '.BxLB-category-name:contains(\"Dining\")',\n    'media': '.BxLB-category-name:contains(\"Media\")',\n    'workspace': '.BxLB-category-name:contains(\"Workspace\")',\n    'activities': '.BxLB-category-name:contains(\"Things to do\")'\n}\n\n# Categories of amenities\nBASIC_AMENITIES = 'div.BxLB-categories-container div:contains(\"Basics\")'\nROOM_AMENITIES = 'div.BxLB-categories-container div:contains(\"In the room\")'\nBATHROOM_AMENITIES = 'div.BxLB-categories-container div:contains(\"Bathroom\")'\nSERVICES_AMENITIES = 'div.BxLB-categories-container div:contains(\"Services\")'\nOUTDOOR_AMENITIES = 'div.BxLB-categories-container div:contains(\"Outdoor\")'\n\n# Policies and conditions\nCANCELLATION_POLICY = 'div.BZag-freebie:contains(\"cancellation\")'\nBREAKFAST_INFO = 'div.BZag-freebie:contains(\"breakfast\")'\nSPECIAL_CONDITIONS = 'div.BZag-freebie'\nCHECK_IN_OUT = 'div.c5NJT'\n\n# Navigation and pagination\nNEXT_PAGE = 'button[aria-label=\"Next page\"]'\nPREV_PAGE = 'button[aria-label=\"Previous page\"]'\nPAGE_NUMBERS = 'div.Joiu-buttons button'\nCURRENT_PAGE = 'button#active'\nSHOW_MORE = 'button.c1oRo-show-more'\n\n# Popup handling\nCLOSE_BUTTON = 'button[aria-label=\"Close\"]'\nDISMISS_BUTTON = '.dismiss-button'\n\n# Property features\nPROPERTY_FEATURES = {\n    'wifi': 'span.BxLB-amenity-name:contains(\"Wi-Fi\")',\n    'parking': 'span.BxLB-amenity-name:contains(\"Parking\")',\n    'breakfast': 'span.BxLB-amenity-name:contains(\"Breakfast\")',\n    'pool': 'span.BxLB-amenity-name:contains(\"Pool\")',\n    'spa': 'span.BxLB-amenity-name:contains(\"Spa\")',\n    'fitness': 'span.BxLB-amenity-name:contains(\"Fitness\")',\n    'restaurant': 'span.BxLB-amenity-name:contains(\"Restaurant\")',\n    'bar': 'span.BxLB-amenity-name:contains(\"Bar\")',\n    'business': 'span.BxLB-amenity-name:contains(\"Business\")',\n}\n\n\n# Amenities selectors\nAMENITIES_SECTION = 'section.Vdvb'\nAMENITIES_CATEGORY = 'div.kml-col-12-12.kml-col-6-12-m'\nCATEGORY_NAME = 'p.BxLB-category-name'\nAMENITY_ITEM = 'span.BxLB-amenity-name'\nTOP_AMENITIES = 'span.t8Xi-amenity-name'\n\n# Categories container\nCATEGORIES_CONTAINER = 'div.DbSA-categories-container'\n\n# Featured amenities at top\nFEATURED_AMENITIES = 'ul.kml-row'\n\n# Individual amenity sections\nAMENITY_SECTIONS = {\n    'basics': '.BxLB-category-name:contains(\"Basics\")',\n    'general': '.BxLB-category-name:contains(\"General\")',\n    'kitchen': '.BxLB-category-name:contains(\"Kitchen\")',\n    'bathroom': '.BxLB-category-name:contains(\"Bathroom\")',\n    'bedroom': '.BxLB-category-name:contains(\"Bedroom\")',\n    'outdoor': '.BxLB-category-name:contains(\"Outdoor\")',\n    'services': '.BxLB-category-name:contains(\"Services\")',\n    'family': '.BxLB-category-name:contains(\"Family friendly\")',\n    'accessibility': '.BxLB-category-name:contains(\"Accessibility\")',\n    'dining': '.BxLB-category-name:contains(\"Dining\")',\n    'media': '.BxLB-category-name:contains(\"Media\")',\n    'workspace': '.BxLB-category-name:contains(\"Workspace\")',\n    'activities': '.BxLB-category-name:contains(\"Things to do\")'\n}"
                },
                "retry.py": {
                  "type": "file",
                  "name": "retry.py",
                  "extension": ".py",
                  "content": "import time\nfrom selenium.webdriver.common.by import By\nfrom selenium.common.exceptions import StaleElementReferenceException, NoSuchElementException, TimeoutException\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom ..config.settings import DEFAULT_TIMEOUT, MAX_RETRIES, RETRY_DELAY\n\ndef find_element_with_retry(parent, selector, max_retries=MAX_RETRIES):\n    \"\"\"Find element with retry logic for stale elements\"\"\"\n    for attempt in range(max_retries):\n        try:\n            return parent.find_element(By.CSS_SELECTOR, selector)\n        except StaleElementReferenceException:\n            if attempt == max_retries - 1:\n                raise\n            time.sleep(RETRY_DELAY)\n        except NoSuchElementException:\n            return None\n\ndef wait_for_element(driver, selector, timeout=DEFAULT_TIMEOUT, parent=None):\n    \"\"\"Wait for single element to be present\"\"\"\n    try:\n        return WebDriverWait(parent or driver, timeout).until(\n            EC.presence_of_element_located((By.CSS_SELECTOR, selector))\n        )\n    except TimeoutException:\n        return None\n\ndef wait_for_elements(driver, selector, timeout=DEFAULT_TIMEOUT, parent=None):\n    \"\"\"Wait for elements and return them when available\"\"\"\n    try:\n        return WebDriverWait(parent or driver, timeout).until(\n            EC.presence_of_all_elements_located((By.CSS_SELECTOR, selector))\n        )\n    except TimeoutException:\n        return []\n\ndef wait_for_page_load(driver, timeout=DEFAULT_TIMEOUT):\n    \"\"\"Wait for page to finish loading\"\"\"\n    try:\n        return WebDriverWait(driver, timeout).until(\n            lambda d: d.execute_script('return document.readyState') == 'complete'\n        )\n    except TimeoutException:\n        return False\n\ndef scroll_into_view(driver, element):\n    \"\"\"Scroll element into view using JavaScript\"\"\"\n    try:\n        driver.execute_script(\"arguments[0].scrollIntoView(true);\", element)\n        time.sleep(0.5)  # Let the page settle\n    except Exception:\n        pass"
                }
              }
            },
            "scrapers": {
              "type": "directory",
              "name": "scrapers",
              "contents": {
                "__init__.py": {
                  "type": "file",
                  "name": "__init__.py",
                  "extension": ".py",
                  "content": ""
                },
                "kayak.py": {
                  "type": "file",
                  "name": "kayak.py",
                  "extension": ".py",
                  "content": "import json\nimport time\nimport random\nimport os\nfrom datetime import datetime\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.support.ui import WebDriverWait\nfrom selenium.webdriver.support import expected_conditions as EC\nfrom selenium.common.exceptions import TimeoutException, WebDriverException\n\nfrom src.core.driver import WebDriverManager\nfrom src.core.logger import setup_logger\nfrom src.utils.retry import (\n    wait_for_element, \n    wait_for_elements, \n    wait_for_page_load,\n    scroll_into_view\n)\nfrom src.utils.selectors import *\n\nclass KayakHotelScraper:\n    def __init__(self, city, check_in_date, check_out_date):\n        self.logger = setup_logger()\n        self.city = city\n        self.check_in_date = check_in_date\n        self.check_out_date = check_out_date\n        self.base_url = \"https://www.kayak.com/hotels\"\n        self.hotels_data = []\n        self.driver = None\n        self.setup_driver()\n        \n    def setup_driver(self):\n        try:\n            self.driver = WebDriverManager.create_driver()\n            self.logger.info(\"WebDriver initialized successfully\")\n        except Exception as e:\n            self.logger.error(f\"Failed to initialize WebDriver: {str(e)}\")\n            raise\n\n    def construct_search_url(self):\n        check_in = self.check_in_date.strftime('%Y-%m-%d')\n        check_out = self.check_out_date.strftime('%Y-%m-%d')\n        city_formatted = self.city.replace(' ', '-')\n        return f\"{self.base_url}/{city_formatted}-c52508/{check_in}/{check_out}/2adults?sort=rank_a\"\n\n    def handle_popups(self):\n        try:\n            popup_selectors = [\n                'button[aria-label=\"Close\"]',\n                '.close-button',\n                '.dismiss-button'\n            ]\n            for selector in popup_selectors:\n                try:\n                    element = wait_for_element(self.driver, selector, timeout=3)\n                    if element and element.is_displayed():\n                        element.click()\n                        time.sleep(0.5)\n                except:\n                    continue\n        except:\n            pass\n\n    def load_page(self, url, max_retries=3):\n        for attempt in range(max_retries):\n            try:\n                self.logger.info(f\"Loading URL (attempt {attempt + 1}): {url}\")\n                self.driver.get(url)\n                wait_for_page_load(self.driver)\n                self.handle_popups()\n                \n                # Scroll to load dynamic content\n                self.driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight/2);\")\n                time.sleep(2)\n                self.driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n                time.sleep(2)\n                self.driver.execute_script(\"window.scrollTo(0, 0);\")\n                \n                return True\n            except Exception as e:\n                self.logger.error(f\"Error loading page (attempt {attempt + 1}): {str(e)}\")\n                if attempt == max_retries - 1:\n                    return False\n                time.sleep(2 ** attempt)\n        return False\n\n    def extract_room_price(self, room_elem):\n        \"\"\"Extract price from room element with multiple selectors\"\"\"\n        try:\n            # Try different price selectors in order of preference\n            price_selectors = [\n                'span.C9NJ-amount',\n                'div.C9NJ-amount', \n                'div.Ptt7-price',\n                'div.c1XBO',\n                'div[class*=\"price\"]'\n            ]\n            \n            for selector in price_selectors:\n                try:\n                    price_elem = room_elem.find_element(By.CSS_SELECTOR, selector)\n                    if price_elem:\n                        price_text = price_elem.text.strip()\n                        # Extract numeric price\n                        price = float(''.join(filter(str.isdigit, price_text.replace(',', ''))))\n                        return price\n                except:\n                    continue\n            return None\n        except Exception as e:\n            self.logger.error(f\"Error extracting room price: {str(e)}\")\n            return None\n\n    def extract_room_details(self):\n        \"\"\"Extract detailed room information\"\"\"\n        try:\n            rooms = []\n            # Wait and scroll for room elements\n            self.driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight/2);\")\n            time.sleep(2)\n            \n            # Look for room containers\n            room_elements = self.driver.find_elements(By.CSS_SELECTOR, 'div.LK1E-groupedRoomType')\n            self.logger.info(f\"Found {len(room_elements)} room elements\")\n            \n            for room_elem in room_elements:\n                try:\n                    room_info = {\n                        'room_type': None,\n                        'price': None,\n                        'bed_configuration': None,\n                        'cancellation_policy': None,\n                        'board_type': None,\n                        'special_conditions': []\n                    }\n                    \n                    # Scroll to room element\n                    self.driver.execute_script(\"arguments[0].scrollIntoView(true);\", room_elem)\n                    time.sleep(1)\n                    \n                    # Room type\n                    type_elem = room_elem.find_element(By.CSS_SELECTOR, 'div.c_Hjx-group-header-title')\n                    if type_elem:\n                        room_info['room_type'] = type_elem.text.strip()\n                    \n                    # Price from provider section\n                    price = self.extract_room_price(room_elem)\n                    if price:\n                        room_info['price'] = price\n                    \n                    # Bed configuration\n                    bed_elems = room_elem.find_elements(By.CSS_SELECTOR, 'div.c_Hjx-detail-amenity')\n                    for elem in bed_elems:\n                        if any(word in elem.text.lower() for word in ['bed', 'twin', 'double', 'queen', 'king']):\n                            room_info['bed_configuration'] = elem.text.strip()\n                            break\n                    \n                    # Policies and board type\n                    policy_elements = room_elem.find_elements(By.CSS_SELECTOR, '.BZag-freebie')\n                    for elem in policy_elements:\n                        text = elem.text.strip()\n                        if 'cancellation' in text.lower():\n                            room_info['cancellation_policy'] = text\n                        elif 'breakfast' in text.lower():\n                            room_info['board_type'] = text\n                        elif text:\n                            room_info['special_conditions'].append(text)\n                    \n                    if any(v for v in room_info.values() if v):\n                        rooms.append(room_info)\n                        self.logger.info(f\"Successfully extracted room: {room_info['room_type']}\")\n                \n                except Exception as e:\n                    self.logger.error(f\"Error extracting room details: {str(e)}\")\n                    continue\n            \n            return rooms\n            \n        except Exception as e:\n            self.logger.error(f\"Error in extract_room_details: {str(e)}\")\n            return []\n\n\n    def extract_amenities(self):\n        \"\"\"Extract all amenities from the detail page\"\"\"\n        amenities = []\n        try:\n            # Scroll to load amenities section\n            self.driver.execute_script(\"window.scrollTo(0, document.body.scrollHeight);\")\n            time.sleep(2)\n            \n            # Get all amenity categories\n            category_containers = self.driver.find_elements(By.CSS_SELECTOR, '.kml-col-12-12.kml-col-6-12-m')\n            \n            for container in category_containers:\n                try:\n                    category_name_elem = container.find_element(By.CSS_SELECTOR, '.BxLB-category-name')\n                    category = category_name_elem.text.strip() if category_name_elem else None\n                    \n                    if category:\n                        # Get all amenities in this category\n                        amenity_elements = container.find_elements(By.CSS_SELECTOR, '.BxLB-amenity-name')\n                        for elem in amenity_elements:\n                            amenity = elem.text.strip()\n                            if amenity and amenity not in amenities:\n                                amenities.append(amenity)\n                except:\n                    continue\n            \n            # Also get amenities from the top summary section\n            top_amenities = self.driver.find_elements(By.CSS_SELECTOR, '.t8Xi-amenity-name')\n            for elem in top_amenities:\n                amenity = elem.text.strip()\n                if amenity and amenity not in amenities:\n                    amenities.append(amenity)\n                    \n            return amenities\n                    \n        except Exception as e:\n            self.logger.error(f\"Error extracting amenities: {str(e)}\")\n            return []\n\n    def extract_hotel_details(self, detail_url):\n        \"\"\"Get detailed information from hotel page\"\"\"\n        try:\n            self.logger.info(f\"Loading detail page: {detail_url}\")\n            if not self.load_page(detail_url):\n                return {}\n            \n            details = {}\n            \n            # Extract rooms\n            rooms = self.extract_room_details()\n            if rooms:\n                details['rooms'] = rooms\n                self.logger.info(f\"Found {len(rooms)} room types\")\n            \n            # Extract amenities\n            amenities = self.extract_amenities()\n            if amenities:\n                details['amenities'] = amenities\n                self.logger.info(f\"Found {len(amenities)} amenities\")\n            \n            return details\n            \n        except Exception as e:\n            self.logger.error(f\"Error extracting hotel details: {str(e)}\")\n            return {}\n\n \n    def extract_hotel_basic_info(self, hotel_element):\n        \"\"\"Extract basic hotel information\"\"\"\n        try:\n            info = {}\n            \n            # Extract hotel name and URL\n            name_elem = hotel_element.find_element(By.CSS_SELECTOR, HOTEL_NAME)\n            if name_elem:\n                info['hotel_name'] = name_elem.text.strip()\n                info['detail_url'] = name_elem.get_attribute('href')\n            \n            # Extract location\n            location_elem = hotel_element.find_element(By.CSS_SELECTOR, HOTEL_LOCATION)\n            if location_elem:\n                info['location'] = location_elem.text.strip()\n            \n            # Extract rating and reviews\n            try:\n                rating_elem = hotel_element.find_element(By.CSS_SELECTOR, HOTEL_RATING)\n                reviews_elem = hotel_element.find_element(By.CSS_SELECTOR, HOTEL_REVIEWS)\n                \n                info['review_scores'] = {\n                    'rating': float(rating_elem.text.strip()),\n                    'count': int(''.join(filter(str.isdigit, reviews_elem.text)))\n                }\n            except:\n                info['review_scores'] = {'rating': None, 'count': None}\n            \n            # Extract price\n            try:\n                price_elem = hotel_element.find_element(By.CSS_SELECTOR, PRICE_AMOUNT)\n                info['price'] = price_elem.text.strip()\n            except:\n                info['price'] = None\n            \n            return info\n            \n        except Exception as e:\n            self.logger.error(f\"Error extracting basic hotel info: {str(e)}\")\n            return None\n\n    def scrape_hotels(self, limit=None):\n        \"\"\"Main method to scrape hotel information\"\"\"\n        try:\n            # Load initial search page\n            search_url = self.construct_search_url()\n            if not self.load_page(search_url):\n                return []\n            \n            # Get all hotel cards first\n            hotel_elements = wait_for_elements(self.driver, HOTEL_CARD)\n            if not hotel_elements:\n                self.logger.error(\"No hotel elements found\")\n                return []\n            \n            self.logger.info(f\"Found {len(hotel_elements)} hotels\")\n            \n            # Store basic info and URLs first\n            hotels_to_process = []\n            for hotel_element in hotel_elements[:limit]:\n                try:\n                    info = {}\n                    # Extract hotel name and URL\n                    name_elem = hotel_element.find_element(By.CSS_SELECTOR, HOTEL_NAME)\n                    if name_elem:\n                        info['hotel_name'] = name_elem.text.strip()\n                        info['detail_url'] = name_elem.get_attribute('href')\n                    \n                    # Extract location\n                    location_elem = hotel_element.find_element(By.CSS_SELECTOR, HOTEL_LOCATION)\n                    if location_elem:\n                        info['location'] = location_elem.text.strip()\n                    \n                    # Extract rating and reviews\n                    try:\n                        rating_elem = hotel_element.find_element(By.CSS_SELECTOR, HOTEL_RATING)\n                        reviews_elem = hotel_element.find_element(By.CSS_SELECTOR, HOTEL_REVIEWS)\n                        \n                        info['review_scores'] = {\n                            'rating': float(rating_elem.text.strip()),\n                            'count': int(''.join(filter(str.isdigit, reviews_elem.text)))\n                        }\n                    except:\n                        info['review_scores'] = {'rating': None, 'count': None}\n                    \n                    # Extract price\n                    price_elem = hotel_element.find_element(By.CSS_SELECTOR, PRICE_AMOUNT)\n                    if price_elem:\n                        info['price'] = price_elem.text.strip()\n                    \n                    if info.get('detail_url'):\n                        hotels_to_process.append(info)\n                    \n                except Exception as e:\n                    self.logger.error(f\"Error extracting basic hotel info: {str(e)}\")\n                    continue\n            \n            # Now process each hotel's details\n            for hotel_info in hotels_to_process:\n                try:\n                    # Get detailed info\n                    details = self.extract_hotel_details(hotel_info['detail_url'])\n                    hotel_info.update(details)\n                    self.hotels_data.append(hotel_info)\n                    \n                    # Return to search page\n                    self.load_page(search_url)\n                    time.sleep(random.uniform(1, 2))\n                    \n                except Exception as e:\n                    self.logger.error(f\"Error processing hotel details: {str(e)}\")\n                    continue\n            \n            self.format_output()\n            return self.hotels_data\n                \n        except Exception as e:\n            self.logger.error(f\"Error in scrape_hotels: {str(e)}\")\n            return []\n\n    def format_output(self):\n        \"\"\"Format the scraped data into the desired structure\"\"\"\n        formatted_data = {\n            \"city\": self.city,\n            \"hotels\": self.hotels_data,\n            \"pagination\": {\n                \"current_page\": 1,\n                \"total_pages\": 1\n            },\n            \"metadata\": {\n                \"scraping_date\": datetime.now().strftime('%Y-%m-%d'),\n                \"scraping_time\": datetime.now().strftime('%H:%M'),\n                \"source_url\": self.base_url\n            }\n        }\n        self.hotels_data = formatted_data\n\n    def save_results(self, filename='hotel_data.json'):\n        try:\n            os.makedirs('data', exist_ok=True)\n            filepath = os.path.join('data', filename)\n            \n            with open(filepath, 'w', encoding='utf-8') as f:\n                json.dump(self.hotels_data, f, ensure_ascii=False, indent=2)\n                self.logger.info(f\"Data saved successfully to {filepath}\")\n            \n        except Exception as e:\n            self.logger.error(f\"Error saving results: {str(e)}\")\n\n    def close(self):\n        if self.driver:\n            try:\n                self.driver.quit()\n                self.logger.info(\"WebDriver closed successfully\")\n            except Exception as e:\n                self.logger.error(f\"Error closing WebDriver: {str(e)}\")"
                }
              }
            },
            "extractors": {
              "type": "directory",
              "name": "extractors",
              "contents": {
                "basic_info.py": {
                  "type": "file",
                  "name": "basic_info.py",
                  "extension": ".py",
                  "content": "from selenium.common.exceptions import NoSuchElementException\nfrom selenium.webdriver.common.by import By\nfrom ..utils.retry import find_element_with_retry\nfrom ..utils.selectors import (\n    HOTEL_NAME, HOTEL_LOCATION, HOTEL_RATING,\n    HOTEL_REVIEWS, HOTEL_STARS, PRICE_AMOUNT,\n    HOTEL_DESCRIPTION\n)\n\nclass BasicInfoExtractor:\n    @staticmethod\n    def extract(hotel_element, logger):\n        \"\"\"Extract basic hotel information from search result element\"\"\"\n        try:\n            hotel_info = {}\n            \n            # Get hotel name and URL\n            try:\n                name_elem = hotel_element.find_element(By.CSS_SELECTOR, HOTEL_NAME)\n                if name_elem:\n                    hotel_info['name'] = name_elem.text.strip()\n                    hotel_info['detail_url'] = name_elem.get_attribute('href')\n                else:\n                    logger.warning(\"Could not find hotel name/URL\")\n                    return None\n            except NoSuchElementException:\n                logger.warning(\"Could not find hotel name/URL\")\n                return None\n            \n            # Get location\n            try:\n                location_elem = hotel_element.find_element(By.CSS_SELECTOR, HOTEL_LOCATION)\n                if location_elem:\n                    hotel_info['location'] = location_elem.text.strip()\n            except NoSuchElementException:\n                hotel_info['location'] = None\n\n            # Get description\n            try:\n                # Looking for description in parent elements\n                parent = hotel_element.find_element(By.XPATH, \"./..\")\n                desc_elem = parent.find_element(By.CSS_SELECTOR, HOTEL_DESCRIPTION)\n                if desc_elem:\n                    hotel_info['description'] = desc_elem.text.strip()\n            except NoSuchElementException:\n                hotel_info['description'] = None\n\n            # Get stars\n            try:\n                stars_elem = hotel_element.find_element(By.CSS_SELECTOR, HOTEL_STARS)\n                if stars_elem:\n                    stars_text = stars_elem.text.strip()\n                    hotel_info['stars'] = stars_text.split()[0] if stars_text else None\n            except NoSuchElementException:\n                hotel_info['stars'] = None\n\n            # Get price\n            try:\n                price_elem = hotel_element.find_element(By.CSS_SELECTOR, PRICE_AMOUNT)\n                if price_elem:\n                    hotel_info['price'] = price_elem.text.strip()\n            except NoSuchElementException:\n                hotel_info['price'] = None\n\n            # Get rating and reviews\n            try:\n                rating_elem = hotel_element.find_element(By.CSS_SELECTOR, HOTEL_RATING)\n                reviews_elem = hotel_element.find_element(By.CSS_SELECTOR, HOTEL_REVIEWS)\n                \n                if rating_elem:\n                    hotel_info['rating'] = rating_elem.text.strip()\n                if reviews_elem:\n                    reviews_text = reviews_elem.text.strip()\n                    # Parse reviews count from format \"Very good (12185)\"\n                    hotel_info['reviews'] = reviews_text\n                    if '(' in reviews_text and ')' in reviews_text:\n                        count = reviews_text.split('(')[1].split(')')[0]\n                        hotel_info['review_count'] = count\n            except NoSuchElementException:\n                pass\n            \n            logger.info(f\"Successfully extracted basic info for: {hotel_info.get('name', 'Unknown')}\")\n            return hotel_info\n            \n        except Exception as e:\n            logger.error(f\"Error extracting hotel info: {str(e)}\")\n            return None"
                },
                "__init__.py": {
                  "type": "file",
                  "name": "__init__.py",
                  "extension": ".py",
                  "content": ""
                },
                "policies.py": {
                  "type": "file",
                  "name": "policies.py",
                  "extension": ".py",
                  "content": "from selenium.common.exceptions import StaleElementReferenceException\nfrom ..utils.retry import wait_for_elements\n\nclass PoliciesExtractor:\n    @staticmethod\n    def extract(room_element, logger):\n        \"\"\"Extract all policies from a room element\"\"\"\n        policies = {\n            'cancellation': None,\n            'checkin': None,\n            'checkout': None,\n            'special_conditions': []\n        }\n        \n        try:\n            policy_elements = wait_for_elements(\n                room_element,\n                '.BZag-freebie, .lUp8 .BNDX',\n                parent=room_element\n            )\n            \n            for element in policy_elements:\n                try:\n                    policy_text = element.text.strip()\n                    if 'cancellation' in policy_text.lower():\n                        policies['cancellation'] = policy_text\n                    elif 'check-in' in policy_text.lower():\n                        policies['checkin'] = policy_text\n                    elif 'check-out' in policy_text.lower():\n                        policies['checkout'] = policy_text\n                    else:\n                        policies['special_conditions'].append(policy_text)\n                except StaleElementReferenceException:\n                    continue\n                    \n        except Exception as e:\n            logger.warning(f\"Error extracting policies: {str(e)}\")\n            \n        return policies"
                },
                "room.py": {
                  "type": "file",
                  "name": "room.py",
                  "extension": ".py",
                  "content": "from selenium.common.exceptions import StaleElementReferenceException\nfrom ..utils.retry import find_element_with_retry, wait_for_elements\nfrom .policies import PoliciesExtractor\nfrom .price import PriceExtractor\n\nclass RoomExtractor:\n    @staticmethod\n    def extract_bed_info(room_element, logger):\n        \"\"\"Extract bed configuration information\"\"\"\n        bed_info = {\n            'type': None,\n            'count': None,\n            'extra': []\n        }\n        \n        try:\n            bed_elements = wait_for_elements(\n                room_element,\n                '.c5NJT-bed-types, .BZag-bed-types',\n                parent=room_element\n            )\n            \n            for element in bed_elements:\n                try:\n                    bed_text = element.text.strip().lower()\n                    if 'bed' in bed_text:\n                        # Parse bed information\n                        parts = bed_text.split()\n                        for i, part in enumerate(parts):\n                            if part.isdigit() and i + 1 < len(parts) and 'bed' in parts[i + 1]:\n                                bed_info['count'] = int(part)\n                                bed_info['type'] = ' '.join(parts[i + 1:])\n                                break\n                    else:\n                        bed_info['extra'].append(bed_text)\n                except StaleElementReferenceException:\n                    continue\n                    \n        except Exception as e:\n            logger.warning(f\"Error extracting bed info: {str(e)}\")\n            \n        return bed_info\n\n    @staticmethod\n    def extract_rooms(driver, logger):\n        \"\"\"Extract room information from the detail page\"\"\"\n        rooms = []\n        try:\n            room_elements = wait_for_elements(driver, '.c5l3f')\n            \n            for room in room_elements:\n                room_info = {\n                    'type': None,\n                    'price': None,\n                    'provider': None,\n                    'bed_config': None,\n                    'policies': None\n                }\n                \n                try:\n                    # Room type\n                    type_elem = find_element_with_retry(room, '.c5NJT div')\n                    if type_elem:\n                        room_info['type'] = type_elem.text.strip()\n                    \n                    # Price\n                    price_elem = find_element_with_retry(room, '.D9i2-price .C9NJ-amount')\n                    if price_elem:\n                        room_info['price'] = PriceExtractor.extract(price_elem, logger)\n                    \n                    # Provider\n                    provider_elem = find_element_with_retry(room, '.c2pAq-logo')\n                    if provider_elem:\n                        room_info['provider'] = provider_elem.get_attribute('alt')\n                    \n                    # Bed configuration\n                    room_info['bed_config'] = RoomExtractor.extract_bed_info(room, logger)\n                    \n                    # Policies\n                    room_info['policies'] = PoliciesExtractor.extract(room, logger)\n                    \n                    if any(room_info.values()):\n                        rooms.append(room_info)\n                        \n                except Exception as e:\n                    logger.warning(f\"Error extracting room details: {str(e)}\")\n                    continue\n                    \n        except Exception as e:\n            logger.error(f\"Error extracting rooms: {str(e)}\")\n            \n        return rooms"
                },
                "price.py": {
                  "type": "file",
                  "name": "price.py",
                  "extension": ".py",
                  "content": "from ..utils.retry import find_element_with_retry\n\nclass PriceExtractor:\n    @staticmethod\n    def extract(price_element, logger):\n        \"\"\"Extract detailed price information\"\"\"\n        price_info = {\n            'amount': None,\n            'currency': None,\n            'per_night': None,\n            'total': None,\n            'taxes_fees': None\n        }\n        \n        try:\n            # Get main price\n            price_text = price_element.text.strip() if price_element else None\n            if price_text:\n                # Parse price components\n                parts = price_text.split()\n                if len(parts) >= 2:\n                    price_info['currency'] = parts[0][0]  # Currency symbol\n                    price_info['amount'] = parts[0][1:]  # Amount without currency\n                    \n                    if 'night' in price_text.lower():\n                        price_info['per_night'] = True\n                \n                # Check for total price\n                total_elem = find_element_with_retry(price_element, '.D9i2-total')\n                if total_elem:\n                    price_info['total'] = total_elem.text.strip()\n                \n                # Check for taxes and fees\n                taxes_elem = find_element_with_retry(price_element, '.D9i2-taxes-fees')\n                if taxes_elem:\n                    price_info['taxes_fees'] = taxes_elem.text.strip()\n                    \n        except Exception as e:\n            logger.warning(f\"Error extracting price details: {str(e)}\")\n            \n        return price_info"
                },
                "amenities.py": {
                  "type": "file",
                  "name": "amenities.py",
                  "extension": ".py",
                  "content": "from selenium.common.exceptions import StaleElementReferenceException\nfrom ..utils.retry import find_element_with_retry, wait_for_elements\n\nclass AmenitiesExtractor:\n    @staticmethod\n    def extract(driver, logger):\n        \"\"\"Extract amenities from the detail page\"\"\"\n        amenities = {\n            'general': [],\n            'room': [],\n            'services': []\n        }\n        \n        try:\n            amenity_elements = wait_for_elements(\n                driver,\n                '[aria-label=\"Amenities\"] .BNDX, .BNDX-mod-presentation-default'\n            )\n            \n            for element in amenity_elements:\n                try:\n                    amenity_text = element.text.strip()\n                    if amenity_text:\n                        # Categorize amenity\n                        if any(word in amenity_text.lower() for word in \n                              ['wifi', 'parking', 'pool', 'restaurant', 'gym']):\n                            amenities['general'].append(amenity_text)\n                        elif any(word in amenity_text.lower() for word in \n                               ['bed', 'tv', 'bathroom', 'air']):\n                            amenities['room'].append(amenity_text)\n                        else:\n                            amenities['services'].append(amenity_text)\n                except StaleElementReferenceException:\n                    continue\n                    \n        except Exception as e:\n            logger.error(f\"Error extracting amenities: {str(e)}\")\n            \n        return amenities"
                }
              }
            }
          }
        }
      }
    },
    "docker-compose.yml": {
      "type": "file",
      "name": "docker-compose.yml",
      "extension": ".yml",
      "content": "version: '3.8'\n\nservices:\n  scraper:\n    build:\n      context: ./scraper\n      dockerfile: Dockerfile\n    volumes:\n      - ./scraper:/app  # Main application code\n      - ./data:/app/data  # Shared data directory\n      - ./scraper/notebooks:/app/notebooks  # Notebooks directory\n      - scraper_venv:/app/venv  # Virtual environment persistence\n    ports:\n      - \"8888:8888\"\n    environment:\n      - PYTHONUNBUFFERED=1\n      - JUPYTER_TOKEN=\"\"\n      - JUPYTER_CONFIG_DIR=/app/.jupyter\n      - PYTHONPATH=/app\n    networks:\n      - hotel-tracker\n    deploy:\n      resources:\n        limits:\n          cpus: '2'\n          memory: 4G\n    restart: unless-stopped\n    command: >\n      bash -c \"\n        mkdir -p /app/.jupyter &&\n        echo 'c.ServerApp.token = \\\"\\\"' > /app/.jupyter/jupyter_server_config.py &&\n        echo 'c.ServerApp.password = \\\"\\\"' >> /app/.jupyter/jupyter_server_config.py &&\n        echo 'c.ServerApp.allow_root = True' >> /app/.jupyter/jupyter_server_config.py &&\n        echo 'c.ServerApp.ip = \\\"0.0.0.0\\\"' >> /app/.jupyter/jupyter_server_config.py &&\n        echo 'c.ServerApp.notebook_dir = \\\"/app/notebooks\\\"' >> /app/.jupyter/jupyter_server_config.py &&\n        echo 'c.ServerApp.autoreload = True' >> /app/.jupyter/jupyter_server_config.py &&\n        echo 'c.ServerApp.watch = True' >> /app/.jupyter/jupyter_server_config.py &&\n        jupyter lab --allow-root --ip=0.0.0.0 --port=8888 --no-browser --watch\"\n\nvolumes:\n  scraper_venv:\n\nnetworks:\n  hotel-tracker:\n    driver: bridge\n"
    }
  }
}